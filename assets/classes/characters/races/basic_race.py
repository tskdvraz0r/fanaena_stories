# ##################################################
# ИМПОРТ
# ##################################################

# Стандартные библиотеки
...

# Сторонние библиотеки
...

# Проектные библиотеки
from packages.engine.data_validation.check import Check

# ##################################################
# КЛАССЫ
# ##################################################

class BasicRace:
    """
    Notes:
        Родительский класс для игровых рас.

    Attributes:
        * _available_races (set[str, str]): перечень доступных игровых рас;
        * self._name (str): наименование расы. По умолчанию "Родительский класс игровых рас";
        * self._strength (int): расовый модификатор Силы. По умолчанию 0;
        * self._dexterity (int): расовый модификатор Ловкости. По умолчанию 0;
        * self._endurance (int): расовый модификатор Телосложения. По умолчанию 0;
        * self._intelligence (int): расовый модификатор Интеллекта. По умолчанию 0;
        * self._wisdom (int): расовый модификатор Мудрости. По умолчанию 0;
        * self._charisma (int): расовый модификатор Харизмы. По умолчанию 0;

    Properties:
        * name - Геттер, отвечающий за получение наименования игровой расы;
        * strength - Геттер, отвечающий за получение значения расового модификатора Силы;
        * dexterity - Геттер, отвечающий за получение значения расового модификатора Ловкости;
        * intelligence - Геттер, отвечающий за получение значения расового модификатора Интеллекта;
        * wisdom - Геттер, отвечающий за получение значения расового модификатора Мудрости;
        * charisma - Геттер, отвечающий за получение значения расового модификатора Харизмы.

    Raises:
        * TypeError: некорректный тип данных.

    Methods:
        ...
    """

    # ##################################################
    # 1. АТРИБУТЫ КЛАССА
    # ##################################################
    _available_races: dict[str, str] = {
        "Humna": "Человек",
        "Zenhaas": "Зенхаас",
        "Xylaat": "Ксилаат",
        "Naara": "Наара",
    }


    # ##################################################
    # 2. СВОЙСТВА КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 3. МЕТОДЫ КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 4. ИНИЦИАЛИЗАЦИЯ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    def __init__(self) -> None:
        self._name: str = "Родительский класс игровых рас"
        self._strength: int = 0
        self._dexterity: int = 0
        self._endurance: int = 0
        self._intelligence: int = 0
        self._wisdom: int = 0
        self._charisma: int = 0


    # ##################################################
    # 5. СВОЙСТВА ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    @property
    def name(self) -> str:
        """
        Notes:
            Геттер, отвечающий за получение наименования игровой расы.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (str): наименование игровой расы.
        """

        Check.value_type(value=self._name, expected_type=str)
        return self._name


    @property
    def strength(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения расового модификатора Силы.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): значение расового модификатора Силы.
        """

        Check.value_type(value=self._strength, expected_type=int)
        return self._strength


    @property
    def dexterity(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения расового модификатора Ловкости.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): значение расового модификатора Ловкости.
        """

        Check.value_type(value=self._dexterity, expected_type=int)
        return self._dexterity


    @property
    def endurance(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения расового модификатора Телосложения.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): значение расового модификатора Телосложения.
        """

        Check.value_type(value=self._endurance, expected_type=int)
        return self._endurance


    @property
    def intelligence(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения расового модификатора Интеллекта.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): значение расового модификатора Интеллекта.
        """

        Check.value_type(value=self._intelligence, expected_type=int)
        return self._intelligence


    @property
    def wisdom(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения расового модификатора Мудрости.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): значение расового модификатора Мудрости.
        """

        Check.value_type(value=self._wisdom, expected_type=int)
        return self._wisdom


    @property
    def charisma(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения расового модификатора Харизмы.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): значение расового модификатора СилХаризмы.
        """

        Check.value_type(value=self._charisma, expected_type=int)
        return self._charisma


    # ##################################################
    # 6. МЕТОДЫ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    ...
