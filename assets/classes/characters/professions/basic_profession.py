# ##################################################
# ИМПОРТ
# ##################################################

# Стандартные библиотеки
...

# Сторонние библиотеки
...

# Проектные библиотеки
from packages.engine.data_validation.check import Check

# ##################################################
# КЛАССЫ
# ##################################################

class BasicProfession:
    """
    Notes:
        Родительский класс для игровых профессий.

    Attributes:
        * _available_professions (dict[str, str]): словарь с наименованиями доступных игровых профессий;
        * self._name: str = "Родительский класс игровых профессий";
        * self._health_points_dice (int): кубик, отвечающий за очки телесного здоровья. По умолчанию 6;
        * self._mind_points_dice (int): кубик, отвечающий за очки ментального здоровья. По умолчанию 6;
        * self._mana_points_dice (int): кубик, отвечающий за очки маны. По умолчанию 6;
        * self._stamina_points_dice (int): кубик, отвечающий за очки стамины. По умолчанию 6;

    Properties:
        * name - геттер, отвечающий за получение наименования Профессии;
        * health_points_dice - геттер, отвечающий за получение значение кубика, отвечающего за очки телесного здоровья;
        * mind_points_dice - геттер, отвечающий за получение значение кубика, отвечающего за очки ментального здоровья;
        * mana_points_dice - геттер, отвечающий за получение значение кубика, отвечающего за очки маны;
        * stamina_points_dice - геттер, отвечающий за получение значение кубика, отвечающего за очки стамины;

    Raises:
        * TypeError: некорректный тип данных;

    Methods:
        ...
    """

    # ##################################################
    # 1. АТРИБУТЫ КЛАССА
    # ##################################################
    _available_professions: dict[str, str] = {
        "Воин": "Warrior",
        "Следопыт": "Rouge",
        "Маг": "Wizzard"
    }


    # ##################################################
    # 2. СВОЙСТВА КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 3. МЕТОДЫ КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 4. ИНИЦИАЛИЗАЦИЯ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    def __init__(self) -> None:
        self._name: str = "Родительский класс игровых профессий"
        self._health_points_dice: int = 6
        self._mind_points_dice: int = 6
        self._mana_points_dice: int = 6
        self._stamina_points_dice: int = 6


    # ##################################################
    # 5. СВОЙСТВА ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    @property
    def name(self) -> str:
        """
        Notes:
            Геттер, отвечающий за получение наименования Профессии.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            str: наименование Профессии.
        """

        Check.value_type(value=self._name, expected_type=str)
        return self._name

    @property
    def health_points_dice(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значение кубика, отвечающего за очки телесного здоровья.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            int: значение кубика, отвечающего за очки телесного здоровья.
        """

        Check.value_type(value=self._health_points_dice, expected_type=int)
        return self._health_points_dice

    @property
    def mind_points_dice(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значение кубика, отвечающего за очки ментального здоровья.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            int: значение кубика, отвечающего за очки ментального здоровья.
        """

        Check.value_type(value=self._mind_points_dice, expected_type=int)
        return self._mind_points_dice

    @property
    def mana_points_dice(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значение кубика, отвечающего за очки маны.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            int: значение кубика, отвечающего за очки маны.
        """

        Check.value_type(value=self._mana_points_dice, expected_type=int)
        return self._mana_points_dice

    @property
    def stamina_points_dice(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значение кубика, отвечающего за очки стамины.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            int: значение кубика, отвечающего за очки стамины.
        """

        Check.value_type(value=self._stamina_points_dice, expected_type=int)
        return self._stamina_points_dice


    # ##################################################
    # 6. МЕТОДЫ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    ...
