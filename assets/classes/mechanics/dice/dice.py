# ##################################################
# ИМПОРТ
# ##################################################

# Стандартные библиотеки
import random as rd

# Сторонние библиотеки
...

# Проектные библиотеки
from packages.engine.data_validation.check import Check


# ##################################################
# КЛАССЫ
# ##################################################

class Dice:
    """
    Notes:
        Класс отвечает за создание экземпляра игрового кубика и методов взаимодействия с ним.

    Attributes:
        * _available_dices (set[int]): множество значений, доступных для инициализации экземпляра класса;
        * self._d (int): значение количества граней кубика;


    Properties:
        * d - геттер, отвечающий за получение значения количества граней кубика;

    Raises:
        * TypeError: некорректный тип данных;
        * ValueError: недоступное значение.

    Methods:
        * roll - метод отвечающий за симуляцию броска игрового кубига. Генерирует псевдослучайное число в доступном диапазоне, зависящем от количества граней кубика.
    """

    # ##################################################
    # 1. АТРИБУТЫ КЛАССА
    # ##################################################
    _available_dices: set[int] = {2, 4, 6, 8, 10, 12, 20, 100, 1000}


    # ##################################################
    # 2. СВОЙСТВА КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 3. МЕТОДЫ КЛАССА
    # ##################################################
    @classmethod
    def get_available_dices(cls) -> set[int]:
        """
        Notes:
            Метод класса, отвечающий за получение множества доступных значений для инициализации экземпляра класса игрового кубика.

        Returns:
            _type_: множество доступных значений для инициализации экземпляра класса игрового кубика.
        """

        return cls._available_dices


    # ##################################################
    # 4. ИНИЦИАЛИЗАЦИЯ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    def __init__(
            self,
            d: int
    ) -> None:
        Check.value_type(value=d, expected_type=int)
        Check.value_is_available(
            value=d,
            available_values=Dice._available_dices
        )

        self._d: int = d


    # ##################################################
    # 5. СВОЙСТВА ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    @property
    def d(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения количества граней кубика.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): количество граней игрового кубика.
        """

        Check.value_type(value=self._d, expected_type=int)
        return self._d


    # ##################################################
    # 6. МЕТОДЫ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    def roll(self) -> int:
        """
        Notes:
            Метод отвечающий за симуляцию броска игрового кубига. Генерирует псевдослучайное число в доступном диапазоне, зависящем от количества граней кубика.

        Raises:
            TypeError: некорректный тип данных.

        Returns:
            (int): псевдослучайно число.
        """
        Check.value_type(value=self._d, expected_type=int)

        match self._d:
            case 1000:
                return sum(Dice(d=100).roll() for _ in range(10))

            case _:
                return rd.randrange(1, self._d + 1)
