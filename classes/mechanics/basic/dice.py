# ##################################################
# ИМПОРТ
# ##################################################

# Стандартные библиотеки
import random as rd

# Сторонние библиотеки
...

# Проектные библиотеки
from classes.engine.data_validation.check import Check


# ##################################################
# КЛАССЫ
# ##################################################

class Dice:
    """
    Notes:
        Класс отвечает за создание экземпляра игрового кубика и методов взаимодействия с ним.

    Attributes:
        ...

    Properties:
        ...

    Raises:
        ...

    Methods:
        ...
    """

    # ##################################################
    # 1. АТРИБУТЫ КЛАССА
    # ##################################################
    _available_dices: set[int] = {2, 4, 6, 8, 10, 12, 20, 100, 1000}


    # ##################################################
    # 2. СВОЙСТВА КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 3. МЕТОДЫ КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 4. ИНИЦИАЛИЗАЦИЯ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    def __init__(
            self,
            d: int
    ) -> None:
        """
        Notes:
            ...

        Args:
            d (int): количество граней игрового кубика.
        """

        Check.value_type(
            value=d,
            expected_type=int
        )

        Check.value_is_available(
            value=d,
            available_values=Dice._available_dices
        )

        self._d: int = d


    # ##################################################
    # 5. АТРИБУТЫ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################

    @property
    def d(self) -> int:
        """
        Notes:
            Геттер, отвечающий за получение значения количества граней кубика.

        Returns:
            (int): количество граней игрового кубика.
        """

        return self._d


    # ##################################################
    # 6. СВОЙСТВА ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################
    ...


    # ##################################################
    # 7. МЕТОДЫ ЭКЗЕМПЛЯРА КЛАССА
    # ##################################################

    def roll(self) -> int:
        """
        Notes:
            Метод отвечающий за симуляцию броска игрового кубига. Генерирует псевдослучайное число в доступном диапазоне, зависящем от количества граней кубика.

        Returns:
            (int): псевдослучайно число.
        """

        match self._d:
            case 1000:
                return sum(Dice(d=100).roll() for _ in range(10))

            case _:
                return rd.randrange(1, self._d + 1)
